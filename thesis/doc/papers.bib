@article{Xi:2007:JFP,
  author={Xi, Hongwei},
  title="{Dependent ML: An approach to practical programming with dependent types}",
  journal={J. Funct. Program.},
  volume=17,
  number=2,
  year=2007,
  issn={0956-7968},
  pages={215--286},
  doi={http://dx.doi.org/10.1017/S0956796806006216},
  publisher={Cambridge University Press},
  address={New Yourk, NY, USA},
  }

@inproceedings{Xi:2004:TYPES,
  author={Hongwei Xi},
  title="{Applied Type System (extended abstract)}",
  booktitle={Post-workshop Proceedings of TYPES 2003},
  year=2004,
  pages={394--408},
  }

@INCOLLECTION{Remy/appsem,
  author = {Didier R{\'{e}}my},
  title = {{U}sing, {U}nderstanding, and {U}nraveling
                  the {OC}aml {L}anguage},
  booktitle = {{A}pplied {S}emantics. Advanced Lectures. LNCS 2395.},
  publisher = {Springer Verlag},
  year = {2002},
  editor = {Gilles Barthe},
  pages = {413--537},
  isbn = {3-540-44044-5},
  category = {A},
  abstract = {
These course notes are addressed to a wide audience of people interested in
modern programming languages in general, ML-like languages in particular, or
simply in OCaml, whether they are programmers or language designers, 
beginners or knowledgeable readers ---little prerequiresite is actually
assumed. 
\\
They provide a formal description of the operational semantics (evaluation)
and statics semantics (type checking) of core ML and of several extensions
starting from small variations on the core language to end up with the
OCaml language ---one of the most popular incarnation of ML--- including
its object-oriented layer.
\\
The tight connection between theory and practice is a constant goal: formal
definitions are often accompanied by OCaml programs: an
interpreter for the operational semantics and an algorithm for 
type reconstruction are included.
Conversely, some practical programming situations taken from modular or
object-oriented programming patterns are considered, compared with one
another, and  explained in terms of type-checking problems. 
\\
Many exercises with different level of difficulties are proposed all along
the way, so that the reader can continuously checks his understanding and
trains his skills manipulating the new concepts; soon, he will feel 
invited to select more advanced exercises and pursue the exploration deeper
so as to reach a stage where he can be left on his own.
},
  ps = {http://gallium.inria.fr/~remy/cours/appsem/ocaml.ps.gz},
  pdf = {http://gallium.inria.fr/~remy/cours/appsem/ocaml.pdf},
  url = {http://gallium.inria.fr/~remy/cours/appsem/}
}

@conference{hudak2007history,
  title={{A history of Haskell: being lazy with class}},
  author={Hudak, P. and Hughes, J. and Jones, S.P. and Wadler, P.},
  booktitle={Proceedings of the third ACM SIGPLAN conference on History of programming languages},
  pages={12--55},
  year={2007},
  organization={ACM}
}

@article{chen2006implementing,
  title={{Implementing typeful program transformations}},
  author={Chen, C. and Shi, R. and Xi, H.},
  journal={Fundamenta informaticae},
  volume={69},
  number={1},
  pages={103--121},
  year={2006},
  publisher={IOS Press}
}

@conference{de1972lambda,
  title={{Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the Church-Rosser theorem}},
  author={De Bruijn, NG},
  booktitle={Indagationes Mathematicae (Proceedings)},
  volume={75},
  number={5},
  pages={381--392},
  year={1972},
  organization={Elsevier}
}

@article{church1940formulation,
  title={{A formulation of the simple theory of types}},
  author={Church, A.},
  journal={Journal of symbolic logic},
  pages={56--68},
  year={1940},
  publisher={JSTOR}
}

@article{landin1965correspondence,
  title={{Correspondence between ALGOL 60 and Church's Lambda-notation: part I}},
  author={Landin, PJ},
  journal={Communications of the ACM},
  volume={8},
  number={2},
  pages={89--101},
  year={1965},
  publisher={ACM}
}

@conference{backus2007can,
  title={{Can programming be liberated from the von Neumann style?: a functional style and its algebra of programs}},
  author={Backus, J.},
  booktitle={ACM Turing award lectures},
  pages={1977},
  year={2007},
  organization={ACM}
}

@misc{gordon1979edinburgh,
  title={{Edinburgh LCF: a mechanized logic of computation, volume 78 of Lecture Notes in Computer Science}},
  author={Gordon, M. and Milner, R. and Wadsworth, C.P.},
  year={1979},
  publisher={Springer-Verlag}
}

@book{mccarthy1965lisp,
  title={{LISP 1.5 programmer's manual}},
  author={McCarthy, J. and Levin, M.I.},
  year={1965},
  publisher={The MIT Press}
}

@article{landin1966next,
  title={{The next 700 programming languages}},
  author={Landin, PJ},
  journal={Communications of the ACM},
  volume={9},
  number={3},
  pages={157--166},
  year={1966},
  publisher={ACM}
}

@book{barendregt1984lambda,
  title={{The lambda calculus: its syntax and semantics}},
  author={Barendregt, H.P.},
  year={1984},
  publisher={North Holland}
}

@book{mendelson1997introduction,
  title={{Introduction to mathematical logic}},
  author={Mendelson, E.},
  year={1997},
  publisher={Chapman \& Hall/CRC}
}

@article{barendregt1992lambda,
  title={{Lambda calculi with types}},
  author={Barendregt, H.P.},
  journal={Handbook of logic in computer science},
  volume={2},
  pages={117--309},
  year={1992},
  publisher={Citeseer}
}

@misc{plotkin1981structural,
  title={{A structural approach to operational semantics}},
  author={Plotkin, G.D.},
  year={1981},
  publisher={Citeseer}
}
